import{Component as e,TagComponent as t,System as s}from"ecsy";class n extends e{constructor(){super(),this.changed=!0,this.released=!1}anyChanged(){return this.changed}anyReleased(){return this.released}}class o extends e{constructor(){super(),this.states={},this.mapping={" ":"jump",ArrowLeft:"left",ArrowRight:"right",ArrowUp:"up",ArrowDown:"down"}}}class a extends e{constructor(){super(),this.clientX=0,this.clientY=0,this.states={}}}class d extends e{constructor(){super(),this.axis_threshold=.4,this.connected=!1}}class r extends t{}class i extends e{}class u extends t{}var c;!function(e){e[e.FORWARD=0]="FORWARD",e[e.BACKWARD=1]="BACKWARD",e[e.UP=2]="UP",e[e.DOWN=3]="DOWN",e[e.LEFT=4]="LEFT",e[e.RIGHT=5]="RIGHT",e[e.INTERACT=6]="INTERACT",e[e.CROUCH=7]="CROUCH",e[e.JUMP=8]="JUMP",e[e.WALK=9]="WALK",e[e.RUN=10]="RUN",e[e.SPRINT=11]="SPRINT"}(c||(c={}));var l,p=c;!function(e){e[e.PRESSED=0]="PRESSED",e[e.RELEASED=1]="RELEASED"}(l||(l={}));var h=l;const m={},g={},E={LEFT:{name:"leftMouseButton",value:0},RIGHT:{name:"rightMouseButton",value:2},MIDDLE:{name:"middleMouseButton",value:1}};class v extends s{execute(){this.queries.vr.results.forEach(e=>{}),this.queries.mouse.results.forEach(e=>{}),this.queries.keyboard.results.forEach(e=>{})}}v.queries={mouse:{components:[a]},keyboard:{components:[o]},receivers:{components:[class extends e{constructor(){super(),this.reset()}reset(){}set(e){}}]}};class b extends s{execute(){this.handleGamePads(),this.handleMouse(),this.handleKeyboard(),this.handleTouchscreen()}handleMouse(){this.queries.mouse.added.forEach(e=>{document.addEventListener("mousedown",e=>console.log("Mouse button pressed"),!1),document.addEventListener("mouseup",e=>console.log("Mouse button released"),!1)})}handleKeyboard(){this.queries.keyboard.added.forEach(()=>{document.addEventListener("keydown",e=>console.log(e.key+" pressed")),document.addEventListener("keyup",e=>console.log(e.key+" released"))})}handleTouchscreen(){}handleGamePads(){this.queries.gamepad.added.forEach(e=>{e.getMutableComponent(d);window.addEventListener("gamepadconnected",e=>{console.log("A gamepad connected:",e.gamepad)}),window.addEventListener("gamepaddisconnected",e=>{console.log("A gamepad disconnected:",e.gamepad)})}),this.queries.gamepad.results.forEach(e=>{if(e.getMutableComponent(d).connected){const t=e.getMutableComponent(n);navigator.getGamepads().forEach(e=>{e.axes&&e.axes.length>=2&&(console.log("left: "+t.states.left),console.log("right: "+t.states.right),console.log("up: "+t.states.up),console.log("down: "+t.states.down))})}})}}b.queries={gamepad:{components:[d,n],listen:{added:!0,removed:!0}},mouse:{components:[a,n],listen:{added:!0,removed:!0}},keyboard:{components:[o,n],listen:{added:!0,removed:!0}}};class y extends s{execute(){this.queries.keyboard.added.forEach(()=>{document.addEventListener("keydown",e=>{this.setKeyState(this.kb,e.key,"down")}),document.addEventListener("keyup",e=>{this.setKeyState(this.kb,e.key,"up")})}),this.queries.keyboard.results.forEach(e=>{this.kb||(this.kb=e.getComponent(o)),this.inp||(this.inp=e.getMutableComponent(n)),Object.keys(this.kb.mapping).forEach(e=>{const t=this.kb.mapping[e],s=this.getKeyState(this.kb,e);"down"===s.current&&"up"===s.prev&&(this.inp.states[t]="down"===s.current,this.inp.changed=!0),"up"===s.current&&"down"===s.prev&&(this.inp.states[t]="down"===s.current,this.inp.changed=!0,this.inp.released=!0),s.prev=s.current})})}setKeyState(e,t,s){const n=this.getKeyState(e,t);n.prev=n.current,n.current=s}getKeyState(e,t){return e.states[t]||(e.states[t]={prev:"up",current:"up"}),e.states[t]}isPressed(e,t){return"down"===this.getKeyState(e,t).current}}y.queries={keyboard:{components:[o,n],listen:{added:!0,removed:!0}}};class S extends s{constructor(){super(...arguments),this.moveHandler=(e,t)=>{t.clientX=e.clientX,t.clientY=e.clientY,t.lastTimestamp=e.timeStamp},this.buttonHandler=(e,t,s)=>{const n=e.button===E.LEFT.value?E.LEFT:e.button===E.RIGHT.value?E.RIGHT:E.MIDDLE,o=this.getMouseState(n.name,t);o.prev=o.current,o.current=s}}execute(){this.queries.mouse.added.forEach(e=>{this.mouse=e.getMutableComponent(a),this.inp=e.getMutableComponent(n),document.addEventListener("mousemove",e=>this.moveHandler(e,this.mouse),!1),document.addEventListener("mousedown",e=>this.buttonHandler(e,this.mouse,h.PRESSED),!1),document.addEventListener("mouseup",e=>this.buttonHandler(e,this.mouse,h.RELEASED),!1)}),this.queries.mouse.results.forEach(()=>{const e=E.LEFT.name,t=this.getMouseState(e,this.mouse);t.current===h.PRESSED&&t.prev===h.RELEASED&&(this.inp.states[e]=t.current===h.PRESSED,this.inp.changed=!0),t.current===h.RELEASED&&t.prev===h.PRESSED&&(this.inp.states[e]=t.current===h.PRESSED,this.inp.changed=!0,this.inp.released=!0),t.current!==t.prev&&(t.prev=t.current)}),this.queries.mouse.removed.forEach(e=>{const t=e.getMutableComponent(a);t&&document.removeEventListener("mousemove",t.moveHandler)})}getMouseState(e,t){return t.states[e]||(t.states[e]={prev:h.RELEASED,current:h.RELEASED}),t.states[e]}}S.queries={mouse:{components:[a,n],listen:{added:!0,removed:!0}}};class w extends s{execute(){this.queries.gamepad.added.forEach(e=>{const t=e.getMutableComponent(d);window.addEventListener("gamepadconnected",e=>{console.log("A gamepad connected:",e.gamepad),t.connected=!0}),window.addEventListener("gamepaddisconnected",e=>{console.log("A gamepad disconnected:",e.gamepad),t.connected=!1})}),this.queries.gamepad.results.forEach(e=>{const t=e.getMutableComponent(d);t.connected&&this.GetGamepadInput(t,e.getMutableComponent(n))})}GetGamepadInput(e,t){navigator.getGamepads().forEach(s=>{s.axes&&s.axes.length>=2&&(s.axes[0]<-e.axis_threshold?t.states.right=!(t.states.left=!0):s.axes[0]>e.axis_threshold?t.states.right=!(t.states.left=!1):t.states.right=t.states.left=!1,s.axes[1]<-e.axis_threshold?t.states.down=!(t.states.up=!1):s.axes[1]>e.axis_threshold?t.states.down=!(t.states.up=!0):t.states.up=t.states.down=!1)})}}w.queries={gamepad:{components:[d,n],listen:{added:!0,removed:!0}}};const R="undefined"!=typeof window&&void 0!==window.document,f={mouse:!0,keyboard:!0,touchscreen:!0,gamepad:!0,debug:!1};function x(e,t=f,s){if(t.debug&&console.log("Initializing input systems..."),!R)return console.error("Couldn't initialize input, are you in a browser?");window&&t.debug&&(window.DEBUG_INPUT=!0),t.debug&&(console.log("Registering input systems with the following options:"),console.log(t));const r=e.createEntity().addComponent(n);t.keyboard&&(e.registerSystem(y,null),r.addComponent(o),t.debug&&console.log("Registered KeyboardInputSystem and added KeyboardInput component to input entity")),t.mouse&&(e.registerSystem(S,null),r.addComponent(a),t.debug&&console.log("Registered MouseInputSystem and added MouseInput component to input entity")),t.gamepad&&(e.registerSystem(w,null),r.addComponent(d),t.debug&&console.log("Registered MouseInputSystem and added MouseInput component to input entity")),t.touchscreen&&t.debug&&console.log("Touchscreen is not yet implemented"),t.debug&&console.log("INPUT: Registered input systems.")}export{m as ActionMappings,v as ActionSystem,p as Actions,h as ButtonState,r as ControllerConnected,i as Draggable,u as Dragging,d as GamepadInput,w as GamepadInputSystem,n as Input,b as InputDebugSystem,g as InputMappings,o as KeyboardInput,y as KeyboardInputSystem,E as MouseButtonMappings,a as MouseInput,S as MouseInputSystem,x as initializeInputSystems};
