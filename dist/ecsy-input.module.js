import{Component as e,TagComponent as t,System as s}from"ecsy";class n extends e{constructor(){super(),this.states={},this.mapping={" ":"jump",ArrowLeft:"left",ArrowRight:"right",ArrowUp:"up",ArrowDown:"down"}}}const o="left-button",r="down",a="up";class d extends e{constructor(){super(),this.clientX=0,this.clientY=0,this.states={},this.downHandler=e=>{this.setKeyState(o,r)},this.moveHandler=e=>{this.clientX=e.clientX,this.lastTimestamp=e.timeStamp},this.upHandler=e=>{this.setKeyState(o,a)}}setKeyState(e,t){const s=this.getKeyState(e);s.prev=s.current,s.current=t}getKeyState(e){return this.states[e]||(this.states[e]={prev:a,current:a}),this.states[e]}}class i extends e{constructor(){super(),this.axis_threshold=.4,this.connected=!1}}class c extends e{constructor(){super(),this.states={up:!1,down:!1,left:!1,right:!1},this.changed=!0,this.released=!1}anyChanged(){return this.changed}anyReleased(){return this.released}}class u extends t{}class l extends e{}class h extends t{}class p extends s{constructor(){super(...arguments),this.queries={controls:{components:[n,c],listen:{added:!0,removed:!0},added:[],results:[]}},this.on_keydown=e=>{console.log("on_keydown: "+e.key),this.setKeyState(e.key,"down")},this.on_keyup=e=>{console.log("on_keyup: "+e.key),this.setKeyState(e.key,"up")}}set debug(e){this.debug=e}execute(e,t){this.queries.controls.added.forEach(e=>{e.getMutableComponent(n);document.addEventListener("keydown",this.on_keydown),document.addEventListener("keyup",this.on_keyup)}),this.queries.controls.results.forEach(e=>{this.kb||(this.kb=e.getComponent(n)),this.inp||(this.inp=e.getMutableComponent(c)),Object.keys(this.kb.mapping).forEach(e=>{const t=this.kb.mapping[e],s=this.kb.getKeyState(e);"down"===s.current&&"up"===s.prev&&(this.inp.states[t]="down"===s.current,this.inp.changed=!0,console.log(t+" changed to "+s)),"up"===s.current&&"down"===s.prev&&(this.inp.states[t]="down"===s.current,this.inp.changed=!0,this.inp.released=!0,console.log(t+" changed to "+s)),s.prev=s.current}),console.log("key mapping",this.kb.mapping.a,this.kb.states.a,"left state",this.inp.states.left)})}setKeyState(e,t){const s=this.getKeyState(e);s.prev=s.current,s.current=t}isPressed(e){return"down"===this.getKeyState(e).current}getKeyState(e){return this.kb.states[e]||(this.kb.states[e]={prev:"up",current:"up"}),this.kb.states[e]}}class g extends s{constructor(){super(...arguments),this.queries={mouse:{components:[d,c],listen:{added:!0,removed:!0},added:[],results:[],removed:[]}}}set debug(e){this.debug=e}execute(e,t){this.queries.mouse.added.forEach(e=>{const t=e.getMutableComponent(d);document.addEventListener("mousemove",t.moveHandler,!1),document.addEventListener("mousedown",t.downHandler,!1),document.addEventListener("mouseup",t.upHandler,!1)}),this.queries.mouse.results.forEach(e=>{const t=e.getComponent(d),s=e.getMutableComponent(c),n=o,i=t.getKeyState(n);i.current===r&&i.prev===a&&(s.states[n]=i.current===r,s.changed=!0),i.current===a&&i.prev===r&&(s.states[n]=i.current===r,s.changed=!0,s.released=!0),i.current!==i.prev&&this.debug&&console.log("New state: "+i.current),i.prev=i.current}),this.queries.mouse.removed.forEach(e=>{const t=e.getMutableComponent(d);t&&document.removeEventListener("mousemove",t.moveHandler)})}}class m extends s{constructor(){super(...arguments),this.queries={gamepad:{components:[i,c],listen:{added:!0,removed:!0},added:[],results:[]}}}execute(e,t){this.queries.gamepad.added.forEach(e=>{const t=e.getMutableComponent(i);window.addEventListener("gamepadconnected",e=>{console.log("A gamepad connected:",e.gamepad),t.connected=!0}),window.addEventListener("gamepaddisconnected",e=>{console.log("A gamepad disconnected:",e.gamepad),t.connected=!1})}),this.queries.gamepad.results.forEach(e=>{const t=e.getMutableComponent(i);t.connected&&this._scan_gamepads(t,e.getMutableComponent(c))})}_scan_gamepads(e,t){navigator.getGamepads().forEach(s=>{s.axes&&s.axes.length>=2&&(this.scan_x(e,s.axes[0],t),this.scan_y(e,s.axes[1],t))})}scan_x(e,t,s){return t<-e.axis_threshold?(s.states.left=!0,void(s.states.right=!1)):t>e.axis_threshold?(s.states.left=!1,void(s.states.right=!0)):(s.states.left=!1,s.states.right=!1,console.log("left: "+s.states.left),void console.log("right: "+s.states.right))}scan_y(e,t,s){return t<-e.axis_threshold?(s.states.up=!1,void(s.states.down=!0)):t>e.axis_threshold?(s.states.up=!0,void(s.states.down=!1)):(s.states.up=!1,s.states.down=!1,console.log("up: "+s.states.up),void console.log("down: "+s.states.down))}}const y={mouse:!0,keyboard:!0,touchscreen:!0,gamepad:!0,debug:!1};function v(e,t=y){t.debug&&console.log("Initializing input systems...");const s="undefined"!=typeof window&&void 0!==window.document;if(t.debug&&(console.log("Registering input systems with the following options:"),console.log(t)),!s)return console.error("Couldn't initialize input, are you in a browser?");t.mouse&&e.registerSystem(g,null),t.keyboard&&e.registerSystem(p,null),t.gamepad&&e.registerSystem(m,null),t.debug&&console.log("INPUT: Registered input systems.")}export{u as ControllerConnected,l as Draggable,h as Dragging,i as GamepadInputState,m as GamepadInputSystem,c as InputState,n as KeyboardInputState,p as KeyboardInputSystem,d as MouseInputState,g as MouseInputSystem,v as initializeInputSystems};
